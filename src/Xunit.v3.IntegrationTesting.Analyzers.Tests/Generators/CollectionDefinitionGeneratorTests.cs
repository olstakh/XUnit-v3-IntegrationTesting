using System.Collections.Immutable;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;

namespace Xunit.v3.IntegrationTesting.Analyzers.Generators.Tests;

public class CollectionDefinitionGeneratorTests
{
    [Fact]
    public async Task GenerateCollectionDefinitionAsync()
    {
        var source = /* lang=c#-test */ @"
            using System;
            using Xunit;
            using Xunit.v3.IntegrationTesting;

            namespace MyNamespace;

            [DependsOnClasses(Dependencies = [typeof(MyTestClass2), typeof(MyTestClass3)], Name = ""MyTestClass1_Collection"")]
            public class MyTestClass1;

            public class MyTestClass2;
            public class MyTestClass3;
        ";

        var generatedCode = /* lang=c#-test */ """
// <auto-generated/>
using System;

[Xunit.CollectionDefinition("MyTestClass1_Collection", DisableParallelization = true)]
[Xunit.v3.IntegrationTesting.DependsOnCollections(typeof(MyNamespace.MyTestClass2), typeof(MyNamespace.MyTestClass3))]
public sealed class Generated_CollectionDefinition_MyTestClass1;
""";

        var generator = GetSourceGenerator(source, generatedCode);

        await generator.RunAsync(TestContext.Current.CancellationToken);
    }


    private static SourceGeneratorTest<DefaultVerifier> GetSourceGenerator(string source, string generatedCode) => new CSharpSourceGeneratorTest<CollectionDefinitionGenerator, DefaultVerifier>
    {
        TestState =
        {
            Sources = { source },
            GeneratedSources =
            {
                (typeof(CollectionDefinitionGenerator), "CollectionDefinitions.g.cs", generatedCode)
            },
            AdditionalReferences = { typeof(FactDependsOnAttribute).Assembly }
        },
        ReferenceAssemblies = ReferenceAssemblies.Net.Net90.AddPackages(new PackageIdentity[]
        {
            new PackageIdentity("xunit.v3", "3.0.0")
        }.ToImmutableArray()),
    };
}